# Configuration file for noa.
# The goal is to find all of the dependencies of the library and recreate its targets.

# =====================================================================================
# Find dependencies
# =====================================================================================
get_filename_component(_noa_install_lib_cmake_path "${CMAKE_CURRENT_LIST_DIR}/.." REALPATH)
list(APPEND CMAKE_MODULE_PATH "${_noa_install_lib_cmake_path}/modules")

include(CMakeFindDependencyMacro)
find_dependency(Threads)

# fmt:
if (NOT TARGET fmt::fmt)
    find_dependency(fmt REQUIRED CONFIG PATHS ${_noa_install_lib_cmake_path} NO_DEFAULT_PATH)
endif ()

# half:
if (NOT TARGET half::half)
    find_dependency(half REQUIRED CONFIG PATHS ${_noa_install_lib_cmake_path} NO_DEFAULT_PATH)
endif ()

# TIFF:
if (@NOA_ENABLE_TIFF@ AND NOT TARGET TIFF::TIFF)
    find_dependency(TIFF REQUIRED)
endif ()

# CPU backend dependencies:
if (@NOA_ENABLE_CPU@)
    if (NOT TARGET OpenMP::OpenMP_CXX AND @NOA_CPU_OPENMP@)
        find_dependency(OpenMP 4.5 REQUIRED)
    endif ()
endif ()

# CUDA backend dependencies:
if (@NOA_ENABLE_CUDA@)
    # We cannot enable a language from here. Instead, alert the user that the library was build
    # with CUDA and that we therefore expect the CUDA language to be enabled.
    get_property(languages GLOBAL PROPERTY ENABLED_LANGUAGES)
    if(NOT "CUDA" IN_LIST languages)
        message(FATAL_ERROR "The library was built with CUDA. Please enable CUDA (e.g. enable_language(CUDA))")
    endif()
    message(STATUS "Built with CMAKE_CUDA_ARCHITECTURES=@CMAKE_CUDA_ARCHITECTURES@")
    message(STATUS "Built with CUDAToolkit_VERSION=@CUDAToolkit_VERSION@")

    # If CUDA was linked statically, we only need the CUDA driver,
    # which should already be required with the CUDA language enabled.
    if (NOT @NOA_CUDA_STATIC@)
        find_dependency(CUDAToolkit @CUDAToolkit_VERSION@ REQUIRED)
    endif ()
endif ()

unset(_noa_install_lib_cmake_path)
list(POP_BACK CMAKE_MODULE_PATH)

# =====================================================================================
# Create targets
# =====================================================================================
if(NOT TARGET noa::noa)
    include("${CMAKE_CURRENT_LIST_DIR}/noaTargets.cmake")
    set(noa_FOUND TRUE)

    if (noa_FIND_COMPONENTS AND NOT noa_FIND_QUIETLY)
        message(STATUS "Some components where required, but noa doesn't support components yet, so this is ignored")
    endif ()
endif()
