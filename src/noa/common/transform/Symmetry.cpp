#include "noa/common/Math.h"
#include "noa/common/transform/Symmetry.h"
#include "noa/common/transform/Geometry.h"

// The symmetry operators are taken from cisTEM:
// https://github.com/timothygrant80/cisTEM/blob/master/src/core/symmetry_matrix.cpp
// Note that their SetToValues() function specify values in column-major order, and we use row-major order,
// not that this should matter. Also, they include the identity matrix, we don't.

// TODO Does the forward or inverse matter here? I would assume it does not, but test by transposing.

namespace {
    using namespace ::noa;

    void setCX(float33_t* rotm, ushort order) {
        const float angle = math::Constants<float>::PI2 / static_cast<float>(order);
        for (ushort i = 1; i < order; ++i)
            rotm[i - 1] = transform::rotateZ(static_cast<float>(i) * angle);
    }

    void setDX(float33_t* rotm, ushort order) {
        setCX(rotm, order);
        rotm[order - 1] = {1.f, 0.f, 0.f,
                           0.f, -1.f, 0.f,
                           0.f, 0.f, -1.f};
        for (ushort i = 1; i < order; ++i)
            rotm[order - 1 + i] = math::elementMultiply(rotm[i - 1], float33_t(+1, +1, +1,
                                                                               -1, -1, +1,
                                                                               +1, +1, +1));
    }

    void setO(float33_t* rotm) {
        //@CLION-formatter:off
        rotm[ 0] = { 0.000000,-1.000000, 0.000000, 0.000000, 0.000000, 1.000000,-1.000000, 0.000000, 0.000000};
        rotm[ 1] = { 0.000000, 0.000000,-1.000000, 0.000000,-1.000000, 0.000000,-1.000000, 0.000000, 0.000000};
        rotm[ 2] = { 0.000000, 1.000000, 0.000000, 0.000000, 0.000000,-1.000000,-1.000000, 0.000000, 0.000000};
        rotm[ 3] = { 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 0.000000,-1.000000, 0.000000, 0.000000};
        rotm[ 4] = { 0.000000, 0.000000,-1.000000, 0.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000};
        rotm[ 5] = { 0.000000,-1.000000, 0.000000, 0.000000, 0.000000,-1.000000, 1.000000, 0.000000, 0.000000};
        rotm[ 6] = { 0.000000, 0.000000, 1.000000, 0.000000,-1.000000, 0.000000, 1.000000, 0.000000, 0.000000};
        rotm[ 7] = { 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 0.000000, 0.000000};
        rotm[ 8] = { 0.000000, 0.000000,-1.000000, 1.000000, 0.000000, 0.000000, 0.000000,-1.000000, 0.000000};
        rotm[ 9] = {-1.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.000000, 0.000000,-1.000000, 0.000000};
        rotm[10] = { 0.000000, 0.000000, 1.000000,-1.000000, 0.000000, 0.000000, 0.000000,-1.000000, 0.000000};
        rotm[11] = { 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000,-1.000000, 0.000000};
        rotm[12] = {-1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 0.000000};
        rotm[13] = { 0.000000, 0.000000,-1.000000,-1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000};
        rotm[14] = { 1.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.000000, 0.000000, 1.000000, 0.000000};
        rotm[15] = { 0.000000, 0.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000};
        rotm[16] = {-1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000,-1.000000};
        rotm[17] = { 0.000000,-1.000000, 0.000000,-1.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.000000};
        rotm[18] = { 1.000000, 0.000000, 0.000000, 0.000000,-1.000000, 0.000000, 0.000000, 0.000000,-1.000000};
        rotm[19] = { 0.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.000000};
        rotm[20] = { 0.000000,-1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000};
        rotm[21] = {-1.000000, 0.000000, 0.000000, 0.000000,-1.000000, 0.000000, 0.000000, 0.000000, 1.000000};
        rotm[22] = { 0.000000, 1.000000, 0.000000,-1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000};
        //@CLION-formatter:on
    }

    void setI1(float33_t* rotm) {
        //@CLION-formatter:off
        rotm[ 0] = {-0.500000,-0.309017,-0.809017,-0.309017,-0.809017,0.500000,-0.809017, 0.500000, 0.309017};
        rotm[ 1] = {-0.309017, 0.809017,-0.500000,-0.809017,-0.500000,0.309017,-0.500000, 0.309017, 0.809017};
        rotm[ 2] = { 0.309017, 0.809017, 0.500000,-0.809017, 0.500000,0.309017,-0.500000,-0.309017, 0.809017};
        rotm[ 3] = { 0.500000,-0.309017, 0.809017,-0.309017, 0.809017,0.500000,-0.809017,-0.500000, 0.309017};
        rotm[ 4] = { 0.000000,-1.000000, 0.000000, 0.000000, 0.000000,1.000000,-1.000000, 0.000000, 0.000000};
        rotm[ 5] = { 0.809017,-0.500000, 0.309017,-0.500000,-0.309017,0.809017,-0.309017,-0.809017,-0.500000};
        rotm[ 6] = { 0.500000,-0.309017,-0.809017, 0.309017,-0.809017,0.500000,-0.809017,-0.500000,-0.309017};
        rotm[ 7] = {-0.500000, 0.309017,-0.809017, 0.309017,-0.809017,0.500000,-0.809017,-0.500000, 0.309017};
        rotm[ 8] = {-0.809017, 0.500000, 0.309017,-0.500000,-0.309017,0.809017,-0.309017,-0.809017, 0.500000};
        rotm[ 9] = { 0.000000, 0.000000, 1.000000,-1.000000, 0.000000,0.000000, 0.000000,-1.000000, 0.000000};
        rotm[10] = {-0.309017, 0.809017, 0.500000,-0.809017,-0.500000,0.309017, 0.500000,-0.309017, 0.809017};
        rotm[11] = { 0.809017, 0.500000, 0.309017,-0.500000, 0.309017,0.809017, 0.309017,-0.809017, 0.500000};
        rotm[12] = { 0.809017,-0.500000,-0.309017, 0.500000, 0.309017,0.809017,-0.309017,-0.809017, 0.500000};
        rotm[13] = {-0.309017,-0.809017,-0.500000, 0.809017,-0.500000,0.309017,-0.500000,-0.309017, 0.809017};
        rotm[14] = {-1.000000, 0.000000, 0.000000, 0.000000,-1.000000,0.000000, 0.000000, 0.000000, 1.000000};
        rotm[15] = {-0.500000, 0.309017, 0.809017,-0.309017, 0.809017,0.500000,-0.809017,-0.500000,-0.309017};
        rotm[16] = {-0.309017,-0.809017, 0.500000,-0.809017, 0.500000,0.309017,-0.500000,-0.309017,-0.809017};
        rotm[17] = { 0.309017,-0.809017,-0.500000,-0.809017,-0.500000,0.309017,-0.500000, 0.309017,-0.809017};
        rotm[18] = { 0.500000, 0.309017,-0.809017,-0.309017,-0.809017,0.500000,-0.809017, 0.500000,-0.309017};
        rotm[19] = { 0.000000, 1.000000, 0.000000, 0.000000, 0.000000,1.000000,-1.000000, 0.000000, 0.000000};
        rotm[20] = { 0.809017, 0.500000,-0.309017,-0.500000, 0.309017,0.809017,-0.309017, 0.809017, 0.500000};
        rotm[21] = { 0.500000, 0.309017, 0.809017, 0.309017, 0.809017,0.500000,-0.809017, 0.500000, 0.309017};
        rotm[22] = {-0.500000,-0.309017, 0.809017, 0.309017, 0.809017,0.500000,-0.809017, 0.500000,-0.309017};
        rotm[23] = {-0.809017,-0.500000,-0.309017,-0.500000, 0.309017,0.809017,-0.309017, 0.809017,-0.500000};
        rotm[24] = { 0.000000, 0.000000,-1.000000,-1.000000, 0.000000,0.000000, 0.000000, 1.000000, 0.000000};
        rotm[25] = {-0.309017,-0.809017,-0.500000,-0.809017, 0.500000,0.309017, 0.500000, 0.309017,-0.809017};
        rotm[26] = { 0.809017,-0.500000,-0.309017,-0.500000,-0.309017,0.809017, 0.309017, 0.809017,-0.500000};
        rotm[27] = { 0.809017, 0.500000, 0.309017, 0.500000,-0.309017,0.809017,-0.309017, 0.809017,-0.500000};
        rotm[28] = {-0.309017, 0.809017, 0.500000, 0.809017, 0.500000,0.309017,-0.500000, 0.309017,-0.809017};
        rotm[29] = {-1.000000, 0.000000, 0.000000, 0.000000, 1.000000,0.000000, 0.000000, 0.000000,-1.000000};
        rotm[30] = { 0.500000,-0.309017, 0.809017, 0.309017,-0.809017,0.500000, 0.809017, 0.500000,-0.309017};
        rotm[31] = { 0.309017, 0.809017, 0.500000, 0.809017,-0.500000,0.309017, 0.500000, 0.309017,-0.809017};
        rotm[32] = {-0.309017, 0.809017,-0.500000, 0.809017, 0.500000,0.309017, 0.500000,-0.309017,-0.809017};
        rotm[33] = {-0.500000,-0.309017,-0.809017, 0.309017, 0.809017,0.500000, 0.809017,-0.500000,-0.309017};
        rotm[34] = { 0.000000,-1.000000, 0.000000, 0.000000, 0.000000,1.000000, 1.000000, 0.000000, 0.000000};
        rotm[35] = {-0.809017,-0.500000,-0.309017, 0.500000,-0.309017,0.809017, 0.309017,-0.809017, 0.500000};
        rotm[36] = {-0.500000,-0.309017, 0.809017,-0.309017,-0.809017,0.500000, 0.809017,-0.500000, 0.309017};
        rotm[37] = { 0.500000, 0.309017, 0.809017,-0.309017,-0.809017,0.500000, 0.809017,-0.500000,-0.309017};
        rotm[38] = { 0.809017, 0.500000,-0.309017, 0.500000,-0.309017,0.809017, 0.309017,-0.809017,-0.500000};
        rotm[39] = { 0.000000, 0.000000,-1.000000, 1.000000, 0.000000,0.000000, 0.000000,-1.000000, 0.000000};
        rotm[40] = { 0.309017, 0.809017,-0.500000, 0.809017,-0.500000,0.309017,-0.500000,-0.309017,-0.809017};
        rotm[41] = {-0.809017, 0.500000,-0.309017, 0.500000, 0.309017,0.809017,-0.309017,-0.809017,-0.500000};
        rotm[42] = {-0.809017,-0.500000, 0.309017,-0.500000, 0.309017,0.809017, 0.309017,-0.809017,-0.500000};
        rotm[43] = { 0.309017,-0.809017, 0.500000,-0.809017,-0.500000,0.309017, 0.500000,-0.309017,-0.809017};
        rotm[44] = { 1.000000, 0.000000, 0.000000, 0.000000,-1.000000,0.000000, 0.000000, 0.000000,-1.000000};
        rotm[45] = { 0.500000, 0.309017,-0.809017, 0.309017, 0.809017,0.500000, 0.809017,-0.500000, 0.309017};
        rotm[46] = { 0.309017,-0.809017,-0.500000, 0.809017, 0.500000,0.309017, 0.500000,-0.309017, 0.809017};
        rotm[47] = {-0.309017,-0.809017, 0.500000, 0.809017,-0.500000,0.309017, 0.500000, 0.309017, 0.809017};
        rotm[48] = {-0.500000, 0.309017, 0.809017, 0.309017,-0.809017,0.500000, 0.809017, 0.500000, 0.309017};
        rotm[49] = { 0.000000, 1.000000, 0.000000, 0.000000, 0.000000,1.000000, 1.000000, 0.000000, 0.000000};
        rotm[50] = {-0.809017, 0.500000, 0.309017, 0.500000, 0.309017,0.809017, 0.309017, 0.809017,-0.500000};
        rotm[51] = {-0.500000, 0.309017,-0.809017,-0.309017, 0.809017,0.500000, 0.809017, 0.500000,-0.309017};
        rotm[52] = { 0.500000,-0.309017,-0.809017,-0.309017, 0.809017,0.500000, 0.809017, 0.500000, 0.309017};
        rotm[53] = { 0.809017,-0.500000, 0.309017, 0.500000, 0.309017,0.809017, 0.309017, 0.809017, 0.500000};
        rotm[54] = { 0.000000, 0.000000, 1.000000, 1.000000, 0.000000,0.000000, 0.000000, 1.000000, 0.000000};
        rotm[55] = { 0.309017,-0.809017, 0.500000, 0.809017, 0.500000,0.309017,-0.500000, 0.309017, 0.809017};
        rotm[56] = {-0.809017,-0.500000, 0.309017, 0.500000,-0.309017,0.809017,-0.309017, 0.809017, 0.500000};
        rotm[57] = {-0.809017, 0.500000,-0.309017,-0.500000,-0.309017,0.809017, 0.309017, 0.809017, 0.500000};
        rotm[58] = { 0.309017, 0.809017,-0.500000,-0.809017, 0.500000,0.309017, 0.500000, 0.309017, 0.809017};
        //@CLION-formatter:on
    }

    void setI2(float33_t* rotm) {
        //@CLION-formatter:off
        rotm[ 0] = { 0.500000,-0.809017, 0.309017,-0.809017,-0.309017, 0.500000,-0.309017,-0.500000,-0.809017};
        rotm[ 1] = { 0.309017,-0.500000, 0.809017,-0.500000,-0.809017,-0.309017, 0.809017,-0.309017,-0.500000};
        rotm[ 2] = {-0.309017,-0.500000, 0.809017, 0.500000,-0.809017,-0.309017, 0.809017, 0.309017, 0.500000};
        rotm[ 3] = {-0.500000,-0.809017, 0.309017, 0.809017,-0.309017, 0.500000,-0.309017, 0.500000, 0.809017};
        rotm[ 4] = { 0.000000,-1.000000, 0.000000, 0.000000, 0.000000, 1.000000,-1.000000, 0.000000, 0.000000};
        rotm[ 5] = {-0.309017, 0.500000, 0.809017,-0.500000,-0.809017, 0.309017, 0.809017,-0.309017, 0.500000};
        rotm[ 6] = {-0.809017, 0.309017, 0.500000, 0.309017,-0.500000, 0.809017, 0.500000, 0.809017, 0.309017};
        rotm[ 7] = {-0.809017,-0.309017, 0.500000, 0.309017, 0.500000, 0.809017,-0.500000, 0.809017,-0.309017};
        rotm[ 8] = {-0.309017,-0.500000, 0.809017,-0.500000, 0.809017, 0.309017,-0.809017,-0.309017,-0.500000};
        rotm[ 9] = { 0.000000, 0.000000, 1.000000,-1.000000, 0.000000, 0.000000, 0.000000,-1.000000, 0.000000};
        rotm[10] = {-0.809017,-0.309017,-0.500000,-0.309017,-0.500000, 0.809017,-0.500000, 0.809017, 0.309017};
        rotm[11] = {-0.500000,-0.809017,-0.309017,-0.809017, 0.309017, 0.500000,-0.309017, 0.500000,-0.809017};
        rotm[12] = {-0.500000,-0.809017, 0.309017,-0.809017, 0.309017,-0.500000, 0.309017,-0.500000,-0.809017};
        rotm[13] = {-0.809017,-0.309017, 0.500000,-0.309017,-0.500000,-0.809017, 0.500000,-0.809017, 0.309017};
        rotm[14] = {-1.000000, 0.000000, 0.000000, 0.000000,-1.000000, 0.000000, 0.000000, 0.000000, 1.000000};
        rotm[15] = { 0.500000, 0.809017,-0.309017,-0.809017, 0.309017,-0.500000,-0.309017, 0.500000, 0.809017};
        rotm[16] = { 0.309017, 0.500000,-0.809017,-0.500000, 0.809017, 0.309017, 0.809017, 0.309017, 0.500000};
        rotm[17] = {-0.309017, 0.500000,-0.809017, 0.500000, 0.809017, 0.309017, 0.809017,-0.309017,-0.500000};
        rotm[18] = {-0.500000, 0.809017,-0.309017, 0.809017, 0.309017,-0.500000,-0.309017,-0.500000,-0.809017};
        rotm[19] = { 0.000000, 1.000000, 0.000000, 0.000000, 0.000000,-1.000000,-1.000000, 0.000000, 0.000000};
        rotm[20] = {-0.309017,-0.500000,-0.809017,-0.500000, 0.809017,-0.309017, 0.809017, 0.309017,-0.500000};
        rotm[21] = {-0.809017,-0.309017,-0.500000, 0.309017, 0.500000,-0.809017, 0.500000,-0.809017,-0.309017};
        rotm[22] = {-0.809017, 0.309017,-0.500000, 0.309017,-0.500000,-0.809017,-0.500000,-0.809017, 0.309017};
        rotm[23] = {-0.309017, 0.500000,-0.809017,-0.500000,-0.809017,-0.309017,-0.809017, 0.309017, 0.500000};
        rotm[24] = { 0.000000, 0.000000,-1.000000,-1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000};
        rotm[25] = {-0.809017, 0.309017, 0.500000,-0.309017, 0.500000,-0.809017,-0.500000,-0.809017,-0.309017};
        rotm[26] = {-0.500000, 0.809017, 0.309017,-0.809017,-0.309017,-0.500000,-0.309017,-0.500000, 0.809017};
        rotm[27] = {-0.500000, 0.809017,-0.309017,-0.809017,-0.309017, 0.500000, 0.309017, 0.500000, 0.809017};
        rotm[28] = {-0.809017, 0.309017,-0.500000,-0.309017, 0.500000, 0.809017, 0.500000, 0.809017,-0.309017};
        rotm[29] = {-1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000,-1.000000};
        rotm[30] = {-0.500000,-0.809017,-0.309017, 0.809017,-0.309017,-0.500000, 0.309017,-0.500000, 0.809017};
        rotm[31] = {-0.309017,-0.500000,-0.809017, 0.500000,-0.809017, 0.309017,-0.809017,-0.309017, 0.500000};
        rotm[32] = { 0.309017,-0.500000,-0.809017,-0.500000,-0.809017, 0.309017,-0.809017, 0.309017,-0.500000};
        rotm[33] = { 0.500000,-0.809017,-0.309017,-0.809017,-0.309017,-0.500000, 0.309017, 0.500000,-0.809017};
        rotm[34] = { 0.000000,-1.000000, 0.000000, 0.000000, 0.000000,-1.000000, 1.000000, 0.000000, 0.000000};
        rotm[35] = { 0.309017, 0.500000,-0.809017, 0.500000,-0.809017,-0.309017,-0.809017,-0.309017,-0.500000};
        rotm[36] = { 0.809017, 0.309017,-0.500000,-0.309017,-0.500000,-0.809017,-0.500000, 0.809017,-0.309017};
        rotm[37] = { 0.809017,-0.309017,-0.500000,-0.309017, 0.500000,-0.809017, 0.500000, 0.809017, 0.309017};
        rotm[38] = { 0.309017,-0.500000,-0.809017, 0.500000, 0.809017,-0.309017, 0.809017,-0.309017, 0.500000};
        rotm[39] = { 0.000000, 0.000000,-1.000000, 1.000000, 0.000000, 0.000000, 0.000000,-1.000000, 0.000000};
        rotm[40] = { 0.809017,-0.309017, 0.500000, 0.309017,-0.500000,-0.809017, 0.500000, 0.809017,-0.309017};
        rotm[41] = { 0.500000,-0.809017, 0.309017, 0.809017, 0.309017,-0.500000, 0.309017, 0.500000, 0.809017};
        rotm[42] = { 0.500000,-0.809017,-0.309017, 0.809017, 0.309017, 0.500000,-0.309017,-0.500000, 0.809017};
        rotm[43] = { 0.809017,-0.309017,-0.500000, 0.309017,-0.500000, 0.809017,-0.500000,-0.809017,-0.309017};
        rotm[44] = { 1.000000, 0.000000, 0.000000, 0.000000,-1.000000, 0.000000, 0.000000, 0.000000,-1.000000};
        rotm[45] = {-0.500000, 0.809017, 0.309017, 0.809017, 0.309017, 0.500000, 0.309017, 0.500000,-0.809017};
        rotm[46] = {-0.309017, 0.500000, 0.809017, 0.500000, 0.809017,-0.309017,-0.809017, 0.309017,-0.500000};
        rotm[47] = { 0.309017, 0.500000, 0.809017,-0.500000, 0.809017,-0.309017,-0.809017,-0.309017, 0.500000};
        rotm[48] = { 0.500000, 0.809017, 0.309017,-0.809017, 0.309017, 0.500000, 0.309017,-0.500000, 0.809017};
        rotm[49] = { 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 0.000000, 0.000000};
        rotm[50] = { 0.309017,-0.500000, 0.809017, 0.500000, 0.809017, 0.309017,-0.809017, 0.309017, 0.500000};
        rotm[51] = { 0.809017,-0.309017, 0.500000,-0.309017, 0.500000, 0.809017,-0.500000,-0.809017, 0.309017};
        rotm[52] = { 0.809017, 0.309017, 0.500000,-0.309017,-0.500000, 0.809017, 0.500000,-0.809017,-0.309017};
        rotm[53] = { 0.309017, 0.500000, 0.809017, 0.500000,-0.809017, 0.309017, 0.809017, 0.309017,-0.500000};
        rotm[54] = { 0.000000, 0.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000};
        rotm[55] = { 0.809017, 0.309017,-0.500000, 0.309017, 0.500000, 0.809017, 0.500000,-0.809017, 0.309017};
        rotm[56] = { 0.500000, 0.809017,-0.309017, 0.809017,-0.309017, 0.500000, 0.309017,-0.500000,-0.809017};
        rotm[57] = { 0.500000, 0.809017, 0.309017, 0.809017,-0.309017,-0.500000,-0.309017, 0.500000,-0.809017};
        rotm[58] = { 0.809017, 0.309017, 0.500000, 0.309017, 0.500000,-0.809017,-0.500000, 0.809017, 0.309017};
        //@CLION-formatter:on
    }
}

namespace noa::transform {
    void Symmetry::parse_(std::string_view symbol) {
        if (symbol.empty())
            NOA_THROW("Input symmetry string is empty");

        try {
            m_symbol.type = static_cast<char>(std::toupper(static_cast<unsigned char>(symbol[0])));

            if (symbol.size() > 1) {
                std::string number(std::begin(symbol) + 1, std::end(symbol) - 1); // offset by 1
                m_symbol.order = string::toInt<ushort>(number);
            } else { // 1, this should be O symmetry
                m_symbol.order = 0;
            }
        } catch (...) {
            NOA_THROW("Failed to parse \"{}\" to a valid symmetry", symbol);
        }

        // Count the number of matrices needed for the symmetry.
        switch (m_symbol.type) {
            case 'C':
                if (m_symbol.order > 0) {
                    m_count = m_symbol.order;
                    break;
                }
            case 'D':
                if (m_symbol.order > 0) {
                    m_count = 2 * m_symbol.order;
                    break;
                }
            case 'I':
                if (m_symbol.order == 1 || m_symbol.order == 2) {
                    m_count = 60;
                    break;
                }
            case 'O':
                if (m_symbol.order == 0) {
                    m_count = 24;
                    break;
                }
            default:
                NOA_THROW("Failed to parse \"{}\" to a valid symmetry. Should be CX, DX, O, I1 or I2", symbol);
        }
        m_count -= 1; // don't include the identity matrix
    }

    const float33_t* Symmetry::getMatrices() {
        if (!m_rotm) {
            m_rotm = std::make_unique<float33_t[]>(m_count);
            switch (m_symbol.type) {
                case 'C': {
                    setCX(m_rotm.get(), m_symbol.order);
                    break;
                }
                case 'D': {
                    setDX(m_rotm.get(), m_symbol.order);
                    break;
                }
                case 'I': {
                    if (m_symbol.order == 1)
                        setI1(m_rotm.get());
                    else
                        setI2(m_rotm.get());
                    break;
                }
                case 'O': {
                    setO(m_rotm.get());
                    break;
                }
            }
        }
        return m_rotm.get();
    }
}
