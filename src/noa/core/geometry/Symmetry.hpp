/// \file noa/core/Symmetry.h
/// \brief Symmetry operations.
/// \author Thomas - ffyr2w
/// \date 20 Jul 2020

#pragma once

#include <string_view>
#include <algorithm> // std::copy
#include <memory>

#include "noa/core/Definitions.hpp"
#include "noa/core/Types.hpp"
#include "noa/core/Exception.hpp"
#include "noa/core/string/Format.hpp"

namespace noa::geometry {
    /// Symmetry operator.
    /// \details This class can parse a string containing a symmetry symbol and converts this symbol
    ///          in a set of DHW 3x3 rotation matrices that can then be applied to a 3D array to enforce
    ///          the desired symmetry. Supported symbols are CX, DX, O, I1 and I2, with X being a
    ///          non-zero positive number.
    /// \note The identity matrix is NOT generated, since performing an interpolation for the identity is quite
    ///       overkill compared to a simple copy of the input array, which is faster and more accurate. For instance,
    ///       a C6 symmetry returns 5 rotation matrices.
    /// \note CX and DX symmetries can be applied to a 2D logical array. The 2x2 symmetry matrices can be
    ///       extracted from the 3x3 matrices generated by this class using the generic conversion constructors.
    class Symmetry {
    public:
        /// Symmetry symbol.
        struct Symbol {
            size_t order; // O = 0, C|D = X, I1 = 1, I2 = 2
            char type; // C, D, O, I
        };

    public: // Static functions
        /// Parses the input string into a valid symmetry symbol.
        static Symbol parse(std::string_view symbol);

    public: // Constructors
        /// Creates an empty instance.
        constexpr Symmetry() = default;

        /// Parses the symmetry symbol and sets the underlying symmetry matrices.
        explicit Symmetry(std::string_view symmetry) { parseAndSetMatrices_(symmetry); }

        /// Creates a symmetry from raw data.
        /// This is mostly to create an interface with non-supported symmetries.
        /// \param symbol       New symmetry symbol. Can be retrieved using symbol().
        /// \param[in] matrices DHW 3x3 symmetry matrices that will be pointed by the instance when calling matrices().
        ///                     Note that this function does not copy the underlying data and nor does it
        ///                     owns it. It creates a view and the caller remains the owner of the matrices.
        /// \param count        Number of 3x3 matrices in \p matrices.
        Symmetry(Symbol symbol, const float33_t* matrices, size_t count)
                : m_matrices(matrices), m_count(count), m_symbol(symbol) {}

    public: // Access data
        /// Returns the symmetry matrices, which doesn't include the identity, required to describe the symmetry.
        /// The number of returned matrices can be accessed at any time using count().
        [[nodiscard]] const float33_t* get() const { return m_matrices; }

        /// Returns a shared pointer of the internal data. Always points to the matrices returned by get().
        [[nodiscard]] shared_t<const float33_t[]> share() const {
            return {m_buffer, m_matrices};
        }

        /// Returns the number of matrices returned by matrices().
        [[nodiscard]] size_t count() const { return m_count; }

        /// Returns the symbol of the current symmetry. \see Symmetry::Symbol.
        [[nodiscard]] Symbol symbol() const { return m_symbol; }

        /// Formats the symmetry symbol to its string representation.
        [[nodiscard]] std::string toString() const {
            if (m_symbol.order) // CX, DX, I1, I2
                return string::format("{}{}", m_symbol.type, m_symbol.order);
            else
                return {m_symbol.type}; // O
        }

    private: // Private member variables and functions
        std::shared_ptr<float33_t[]> m_buffer{}; // is only used for C and D symmetries
        const float33_t* m_matrices{}; // actual pointer that should be shared; can point to static data
        size_t m_count{}; // number of symmetry matrices, without the identity, to describe the symmetry
        Symbol m_symbol{};

        // Parses the symbol but doesn't check if it is recognized.
        static Symbol parseSymbol_(std::string_view symbol);

        // Supported are CX, DX, O, I1, I2. X is a non-zero positive integer.
        // The string should be left trimmed.
        void parseAndSetMatrices_(std::string_view symbol);
    };

    NOA_IH std::ostream& operator<<(std::ostream& os, const Symmetry& s) {
        os << s.toString();
        return os;
    }
}
